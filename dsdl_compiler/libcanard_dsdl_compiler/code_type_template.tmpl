/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: ${t.source_file}
 */

#include "${t.header_filename}"
#include "canard.h"

<!--(macro generate_primary_body)--> #! type_name, service, max_bitlen, fields, constants, union, has_array

 %if max_bitlen
/**
  * @brief ${type_name}Encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @param offset: Call with 0, bit offset to msg storage
  * @param root_item: Call with 1, this for internal use
  * @retval returns message length as bytes (when root_item == 1)
  */
uint32_t ${type_name}Encode(${type_name} *source, void *msg_buf, uint32_t offset, uint8_t root_item) {
  %if union
    /* Max Union Tag Value */
    //assert(source->union_tag > ${(len(fields) - 1)});
  %endif
    %if has_array:
    uint32_t c = 0;
    %endif

    %if union:
    /* Union Tag ${union} bits */
    canardEncodeScalar(msg_buf, offset, ${union}, (void*)&source->union_tag); // ${union} bits
    offset += ${union};
    $!setvar("union_index", "0")!$
    %endif

    % for f in fields:
     %if union:
    ${'if' if not union_index else 'else if'} (source->union_tag == ${union_index}) {
      $!setvar("union_index", "union_index + 1")!$
     %endif
        %if f.type_category == t.CATEGORY_ARRAY
            %if f.dynamic_array == True

    /* Dynamic Array (${f.name})*/
                %if f.last_item
                    %if f.bitlen < 8
    ${f.array_max_size_bit_len}
    /*  - Add array length, last item, but bitlen < 8. */
    canardEncodeScalar(msg_buf, offset, ${f.array_max_size_bit_len}, (void*)&source->${'%s' % ((f.name + '_len'))});
    offset += ${f.array_max_size_bit_len};
                    %else
    if (! root_item) {
        /* - Add array length */
        canardEncodeScalar(msg_buf, offset, ${f.array_max_size_bit_len}, (void*)&source->${'%s' % ((f.name + '_len'))});
        offset += ${f.array_max_size_bit_len};
    }
                    %endif
                %else
    /* - Add array length */
    canardEncodeScalar(msg_buf, offset, ${f.array_max_size_bit_len}, (void*)&source->${'%s' % ((f.name + '_len'))});
    offset += ${f.array_max_size_bit_len};
                %endif
    /* - Add array items */
    for (c = 0; c < source->${'%s' % ((f.name + '_len'))}; c++) {
                %if f.cpp_type_category == t.CATEGORY_COMPOUND:
        offset += ${f.cpp_type}Encode((void*)&source->${f.name}[c], msg_buf, offset, 0);
                %else
        canardEncodeScalar(msg_buf, offset, ${f.bitlen}, (void*)(source->${f.name} + c)); // ${f.max_size}
        offset += ${f.bitlen};
                %endif
    }
            %else
    /* Static array (${f.name}) */
    for (c = 0; c < ${f.array_size}; c++) {
        canardEncodeScalar(msg_buf, offset, ${f.bitlen}, (void*)(source->${f.name} + c)); // ${f.max_size}
        offset += ${f.bitlen};
    }
            %endif

        %elif f.type_category == t.CATEGORY_VOID:

    /* Void${f.bitlen} */
    offset += ${f.bitlen};
        %elif f.type_category == t.CATEGORY_COMPOUND:

    /* Compound */
    offset = ${f.cpp_type}Encode((void*)&source->${f.name}, msg_buf, offset, 0);
        %else
            %if f.saturate
    source->${f.name} = SATURATE(source->${f.name}, ${f.max_size})
            %endif
    canardEncodeScalar(msg_buf, offset, ${f.bitlen}, (void*)&source->${f.name}); // ${f.max_size}
    offset += ${f.bitlen};

        %endif
     %if union:
    }
     %endif
    % endfor
    if (root_item) {
        return (offset + 7 ) / 8;
    }

    return offset;
}

/**
  * @brief ${type_name}Decode
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     ${type_name} dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @retval
  */
uint32_t ${type_name}Decode(const CanardRxTransfer* transfer, uint16_t payload_len, ${type_name} *dest, uint8_t **dyn_arr_buf, uint32_t offset) {
    %if has_array
    uint32_t c = 0;
    %endif

    %if union:
    /* Get Union Tag */
    canardDecodeScalar(transfer, offset, ${union}, false, (void*)&dest->union_tag); // ${union}
    offset += ${union};
    $!setvar("union_index", "0")!$
    %endif

    % for f in fields:
     %if union:
    ${'if' if not union_index else 'else if'} (dest->union_tag == ${union_index}) {
      $!setvar("union_index", "union_index + 1")!$
     %endif
        %if f.type_category == t.CATEGORY_ARRAY
            %if f.dynamic_array == True

    /* Dynamic Array (${f.name})*/
                %if f.last_item
                    %if f.bitlen > 7
    /*  - Last item in struct & Root item & (Array Size > 8 bit), tail array optimization */
    if (payload_len) {
        /*  - Calculate Array length from MSG length */
        dest->${'%s' % ((f.name + '_len'))} = ((payload_len * 8) - offset ) / ${f.bitlen}; // ${f.bitlen} bit array item size
    } else {
        /* - Array length ${f.array_max_size_bit_len} bits */
        canardDecodeScalar(transfer, offset, ${f.array_max_size_bit_len}, false, (void*)&dest->${'%s' % ((f.name + '_len'))}); // ${f.max_size}
        offset += ${f.array_max_size_bit_len};
    }
                    %else
    canardDecodeScalar(transfer, offset, ${f.array_max_size_bit_len}, false, (void*)&dest->${'%s' % ((f.name + '_len'))}); // ${f.max_size}
    offset += ${f.array_max_size_bit_len};
                    %endif
                %else
    /*  - Array length, not last item ${f.array_max_size_bit_len} bits*/
    canardDecodeScalar(transfer, offset, ${f.array_max_size_bit_len}, false, (void*)&dest->${'%s' % ((f.name + '_len'))}); // ${f.max_size}
    offset += ${f.array_max_size_bit_len};
                %endif
    /*  - Get Array */
    if (dyn_arr_buf) {
        dest->${f.name} = (${f.cpp_type}*)*dyn_arr_buf;
    }
    for (c = 0; c < dest->${'%s' % ((f.name + '_len'))}; c++) {
                    %if f.cpp_type_category == t.CATEGORY_COMPOUND:
        offset += ${f.cpp_type}Decode(transfer, 0, (void*)&dest->${f.name}[c], dyn_arr_buf, offset);
                    %else
        if (dyn_arr_buf) {
            canardDecodeScalar(transfer, offset, ${f.bitlen}, ${f.signedness}, (void*)*dyn_arr_buf); // ${f.max_size}
            *dyn_arr_buf = (uint8_t *)(((${f.cpp_type}*)*dyn_arr_buf) + 1);
        }
        offset += ${f.bitlen};
                    %endif
    }
            %else

    /* Static array (${f.name}) */
    for (c = 0; c < ${f.array_size}; c++) {
        canardDecodeScalar(transfer, offset, ${f.bitlen}, ${f.signedness}, (void*)(dest->${f.name} + c));
        offset += ${f.bitlen};
    }
            %endif
        %elif f.type_category == t.CATEGORY_VOID:

    /* Void${f.bitlen} */
    offset += ${f.bitlen};
        %elif f.type_category == t.CATEGORY_COMPOUND:

    /* Compound */
    offset = ${f.cpp_type}Decode(transfer, 0, (void*)&dest->${f.name}, dyn_arr_buf, offset);
        %else

    canardDecodeScalar(transfer, offset, ${f.bitlen}, ${f.signedness}, (void*)&dest->${f.name});
    offset += ${f.bitlen};
        %endif
     %if union:
    }
     %endif
    % endfor
    return offset;
}
 %else
uint32_t ${type_name}Encode(${type_name} *source, void *msg_buf, uint32_t offset, uint8_t root_item) {
    if (root_item) {
        return (offset + 7 ) / 8;
    }
    return offset;
}
uint32_t ${type_name}Decode(const CanardRxTransfer* transfer, uint16_t payload_len, ${type_name} *dest, uint8_t **dyn_arr_buf, uint32_t offset) {
    return offset;
}
 %endif
<!--(end)-->

% if t.kind == t.KIND_SERVICE:
${generate_primary_body(type_name=t.name_space_type_name+'Request', service='_REQUEST', max_bitlen=t.get_max_bitlen_request(), \
                               fields=t.request_fields, constants=t.request_constants, \
                               union=t.request_union, has_array=t.request_has_array)}

${generate_primary_body(type_name=t.name_space_type_name+'Response', service='_RESPONSE', max_bitlen=t.get_max_bitlen_response(), \
                               fields=t.response_fields, constants=t.response_constants, \
                               union=t.response_union, has_array=t.response_has_array)}
% else:
${generate_primary_body(type_name=t.name_space_type_name, service='', max_bitlen=t.get_max_bitlen(), \
                        fields=t.fields, constants=t.constants, union=t.union, has_array=t.has_array)}
% endif
